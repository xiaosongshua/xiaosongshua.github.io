{"title":"let const var","slug":"let-const-var","date":"2020-09-20T10:30:39.000Z","updated":"2020-09-20T16:36:09.182Z","comments":true,"path":"api/articles/let-const-var.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h2 id=\"浅谈var、let和const区别\"><a href=\"#浅谈var、let和const区别\" class=\"headerlink\" title=\"浅谈var、let和const区别\"></a>浅谈var、let和const区别</h2><blockquote>\n<p>前言：随着2015年6月 ECMAScript 6.0 发布以来，有几个新的变量声明方式进入前端开发者的视线，即 let、const、import 和 class 命令，而这些新的声明方式之中有两个容易和 var 混淆，那就是 let 和 const。那这两个新的声明方式和我们之前使用的 var 声明方式有什么不同呢，那么是什么原因导致 ES6 推崇新的声明方式摒弃传统的声明方式呢，让我们通过这篇文章一探究竟。</p>\n</blockquote>\n<h3 id=\"简单介绍：\"><a href=\"#简单介绍：\" class=\"headerlink\" title=\"简单介绍：\"></a>简单介绍：</h3><hr>\n<p><font color=\"red\">let</font> 的用法类似于 <font color=\"red\">var</font>，但是 <font color=\"red\">let</font> 只在所在的代码块内有效，所以我们一般使用 <font color=\"red\">let</font> 替代 <font color=\"red\">var</font>。而 <font color=\"red\">const</font> 用来声明常量。</p>\n<p>让我们先看一看这张表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">声明方式</th>\n<th align=\"left\">变量提升</th>\n<th align=\"left\">暂时性死区</th>\n<th align=\"left\">重复声明</th>\n<th align=\"left\">初始值</th>\n<th align=\"left\">作用域</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">var</td>\n<td align=\"left\">允许</td>\n<td align=\"left\">不存在</td>\n<td align=\"left\">允许</td>\n<td align=\"left\">不需要</td>\n<td align=\"left\">除块级</td>\n</tr>\n<tr>\n<td align=\"left\">let</td>\n<td align=\"left\">不允许</td>\n<td align=\"left\">存在</td>\n<td align=\"left\">不允许</td>\n<td align=\"left\">不需要</td>\n<td align=\"left\">块级</td>\n</tr>\n<tr>\n<td align=\"left\">const</td>\n<td align=\"left\">不允许</td>\n<td align=\"left\">存在</td>\n<td align=\"left\">不允许</td>\n<td align=\"left\">需要</td>\n<td align=\"left\">块级</td>\n</tr>\n</tbody></table>\n<p>接下来我们根据这几个方面来介绍 var、let和const的区别：变量提升、暂时性死区、重复声明、初始值和作用域。</p>\n<h4 id=\"一、变量提升\"><a href=\"#一、变量提升\" class=\"headerlink\" title=\"一、变量提升\"></a>一、变量提升</h4><p>概述：变量可在声明之前使用。</p>\n<p>首先看这三段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//正常运行，控制台输出 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//报错，Uncaught ReferenceError: b is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">//报错，Uncaught ReferenceError: c is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">var</font> 命令经常会发生变量提升现象，按照一般逻辑，变量应该在声明之后使用才对。为了纠正这个现象，ES6 规定 <font color=\"red\">let</font> 和 <font color=\"red\">const</font> 命令不发生变量提升，使用 <font color=\"red\">let</font> 和 <font color=\"red\">const</font> 命令声明变量之前，该变量是不可用的。主要是为了减少运行时错误，防止变量声明前就使用这个变量，从而导致意料之外的行为。</p>\n<h4 id=\"二、暂时性死区\"><a href=\"#二、暂时性死区\" class=\"headerlink\" title=\"二、暂时性死区\"></a>二、暂时性死区</h4><p>概述：如果在代码块中存在 let 或 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\ttmp = <span class=\"string\">&#x27;abc&#x27;</span>; <span class=\"comment\">//报错，Uncaught ReferenceError: tmp is not defined</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的原意是在 if 内定义外部的 <font color=\"red\">tmp</font> 为 ‘abc’。</p>\n<p>但现实是，存在全局变量 <font color=\"red\">tmp</font>，但是块级作用域内 <font color=\"red\">tmp</font> 又声明了一个 <font color=\"red\">tmp</font> 变量，导致后者被绑定在这个块级作用域中，所以在 <font color=\"red\">let</font> 声明变量前，对 <font color=\"red\">tmp</font> 赋值就报错了。</p>\n<h4 id=\"三、重复声明\"><a href=\"#三、重复声明\" class=\"headerlink\" title=\"三、重复声明\"></a>三、重复声明</h4><p>概述：指在相同作用域内，重复声明同一个变量。</p>\n<p><font color=\"red\">let</font> 和 <font color=\"red\">const</font> 命令声明的变量不允许重复声明：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// 报错，Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> PI = <span class=\"number\">3</span>; <span class=\"comment\">// 报错，Uncaught SyntaxError: Identifier &#x27;PI&#x27; has already been declared</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 当调用func()时报错，Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// 报错，Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> PI = <span class=\"number\">3</span>; <span class=\"comment\">// 报错，Uncaught SyntaxError: Identifier &#x27;PI&#x27; has already been declared</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">var</font> 是允许重复定义的，而这又会给我们带来什么麻烦呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 输出 5</span></span><br></pre></td></tr></table></figure>\n\n<p>对于学习过静态（类型）语言的人知道，这段代码要是替换成 c 语言或其他静态语言，输出的结果应该是 10。然而对于 javascript 来说，这段代码的输出结果是 5。因为 <font color=\"red\">var</font> 命令没有块级作用域，所以 for 循环括号内的变量 <font color=\"red\">i</font> 会覆盖外层 <font color=\"red\">i</font>，而且 <font color=\"red\">var</font> 允许重复声明，所以这段代码中 <font color=\"red\">i</font> 被声明了两次, <font color=\"red\">i</font> 的最终结果就被 for 循环的 i 给覆盖了。</p>\n<h4 id=\"四、初始值\"><a href=\"#四、初始值\" class=\"headerlink\" title=\"四、初始值\"></a>四、初始值</h4><p>由于 <font color=\"red\">const</font> 声明的是只读的常量，一旦声明，就必须立即初始化，声明之后值不能改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">PI = <span class=\"number\">3</span>; <span class=\"comment\">// 报错，Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五、作用域\"><a href=\"#五、作用域\" class=\"headerlink\" title=\"五、作用域\"></a>五、作用域</h4><p>在 ES5 中只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p>\n<p>第一种场景，内层变量可能会覆盖外层变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">//处于全局作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">//处于函数作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的原意是，<font color=\"red\">if</font>代码块的外部使用外层的<font color=\"red\">tmp</font>变量，内部使用内层的tmp变量。</p>\n<p>然而现实是在这段代码中，function 内部的2个 <font color=\"red\">tmp</font> 变量处在同一函数作用域，由于变量提升，导致函数作用域中的 <font color=\"red\">tmp</font> 覆盖全局作用域中的 <font color=\"red\">tmp</font>，所以，f()输出结果为<font color=\"red\">undefined</font>。</p>\n<p>第二种场景，用来计数的循环变量泄露为全局变量（前面在重复声明中提到的）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 输出 5</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，变量<font color=\"red\">i</font>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p>\n<blockquote>\n<p>本文内容以阮一峰的《ECMAScript 6 入门》为基础进行总结，欢迎各位提出文章内容中有错误和疑惑的地方~</p>\n</blockquote>\n","categories":[],"tags":[]}