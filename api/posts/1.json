{"total":3,"pageSize":10,"pageCount":1,"data":[{"title":"React生命周期函数","slug":"React生命周期函数","date":"2020-09-22T13:52:17.000Z","updated":"2020-09-22T14:14:41.848Z","comments":true,"path":"api/articles/React生命周期函数.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"react-V6-3新生命周期函数总结\"><a href=\"#react-V6-3新生命周期函数总结\" class=\"headerlink\" title=\"react-V6.3新生命周期函数总结\"></a>react-V6.3新生命周期函数总结</h3><blockquote>\n<h4 id=\"新的生命周期\"><a href=\"#新的生命周期\" class=\"headerlink\" title=\"新的生命周期\"></a>新的生命周期</h4></blockquote>\n<p>React V16.3新增的生命周期：</p>\n<ul>\n<li>getDerivedStateFromProps()</li>\n<li>getSnapshotBeforeUpate()</li>\n</ul>\n<p>废弃的生命周期函数：</p>\n<ul>\n<li>componentWillMount()</li>\n<li>componentWillReceiveProps()</li>\n<li>componentWillUpdate()</li>\n</ul>\n<hr>\n<p><strong>虽然废弃了这三个生命周期函数，但是 React 为了向下兼容，并没有在 V16.3 这个版本中彻底删除这三个生命周期函数，同时新增了以<font color=\"red\"> “ UNSAFE_ “ </font>开头的 UNSAFE_componentWillMount(), UNSAFE_componentWillReceiveProps(), UNSAFE_componentWillUpdate() 这三个函数。</strong></p>\n<blockquote>\n<h4 id=\"react-v16-3之前版本的生命周期（老生命周期）\"><a href=\"#react-v16-3之前版本的生命周期（老生命周期）\" class=\"headerlink\" title=\"react-v16.3之前版本的生命周期（老生命周期）\"></a>react-v16.3之前版本的生命周期（老生命周期）</h4></blockquote>\n<p><font color=\"pink\">未完待续…</font><br><font color=\"pink\">未完待续…</font><br><font color=\"pink\">未完待续…</font><br><font color=\"pink\">未完待续…</font><br><font color=\"pink\">未完待续…</font><br><font color=\"pink\">未完待续…</font></p>\n","text":"react-V6.3新生命周期函数总结新的生命周期React V16.3新增的生命周期：getDerivedStateFromProps()getSnapshotBeforeUpate()废弃的生命周期函数：componentWillMount()componentWillRec","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"React","slug":"React","count":1,"path":"api/tags/React.json"}]},{"title":"let const var","slug":"let-const-var","date":"2020-09-20T10:30:39.000Z","updated":"2020-09-21T16:00:47.539Z","comments":true,"path":"api/articles/let-const-var.json","excerpt":"<h2 id=\"浅谈var、let和const区别\"><a href=\"#浅谈var、let和const区别\" class=\"headerlink\" title=\"浅谈var、let和const区别\"></a>浅谈var、let和const区别</h2><blockquote>\n<p>前言：随着2015年6月 ECMAScript 6.0 发布以来，有几个新的变量声明方式进入前端开发者的视线，即 let、const、import 和 class 命令，而这些新的声明方式之中有两个容易和 var 混淆，那就是 let 和 const。那这两个新的声明方式和我们之前使用的 var 声明方式有什么不同呢，那么是什么原因导致 ES6 推崇新的声明方式摒弃传统的声明方式呢，让我们通过这篇文章一探究竟。</p>\n</blockquote>","keywords":null,"cover":null,"content":null,"text":"浅谈var、let和const区别前言：随着2015年6月 ECMAScript 6.0 发布以来，有几个新的变量声明方式进入前端开发者的视线，即 let、const、import 和 class 命令，而这些新的声明方式之中有两个容易和 var 混淆，那就是 let 和 con","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"前端ES6","slug":"前端ES6","count":1,"path":"api/tags/前端ES6.json"}]},{"title":"杂记","slug":"杂记","date":"2020-09-19T16:58:57.341Z","updated":"2020-09-21T15:35:49.153Z","comments":true,"path":"api/articles/杂记.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p><em>2020-09-21</em></p>\n</blockquote>\n<ul>\n<li>晚上下班回家路上找了好久共享电动车也没有找到，幸好博哥找了一个，骑着青桔蹭了一路顺风车。。。🤪</li>\n</ul>\n","text":"2020-09-21晚上下班回家路上找了好久共享电动车也没有找到，幸好博哥找了一个，骑着青桔蹭了一路顺风车。。。🤪","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"骚话天地","slug":"骚话天地","count":1,"path":"api/tags/骚话天地.json"}]}]}